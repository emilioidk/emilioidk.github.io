<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emilio Martin Lundgaard Lopez</title>
    <description>I&#39;m a computer scientist from Rosario, Argentina. Currently living in Aalborg, Danmark.
</description>
    <link>http://emilio.lundgaardlopez.com/</link>
    <atom:link href="http://emilio.lundgaardlopez.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 14 Dec 2015 14:31:11 +0100</pubDate>
    <lastBuildDate>Mon, 14 Dec 2015 14:31:11 +0100</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Development: Re implementing phpFortune. Part 1: the plan.</title>
        <description>&lt;h2 id=&quot;phpfortune&quot;&gt;phpFortune&lt;/h2&gt;

&lt;p&gt;phpFortune was one of the first apps I did using PHP and MySQL. It was my intention to learn about the almighty PHP and I though the project was small enough to keep my sanity trying to keep track of everything but also big and extensible enough, in case I would like to add new features in the future. While I found it really useful to develop it, it is time for me to retake and undust some old PHP and even if I could really likely work on my old code to make some changes and improve phpFortune, I’ve decided to re implement the whole application into a phpFortune 2.0. The reason for this decision is that I’d like to use this exercise to try a more administrative approach to development. I’ll try to design and document the project by stages and hopefully it will be a good example to compare it in the future with more sophisticated and better engineered projects.&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;p&gt;It is quite simple: phpFortune is a simple application that queries a quotes database and returns a quote. I found a set of quotes of the kind “QUOTE - AUTHOR” which was quite easy to put in my own database. From there it was quite straightforward: establish a connection with the database, get a random quote, and return it to the caller (I’d just actually display it).&lt;/p&gt;

&lt;p&gt;This time, while the goal of the application will be similar, we will plan the app with some characteristics that would make it more useful.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Divide the application into sensible modules. Hide sensitive information.&lt;/li&gt;
  &lt;li&gt;Create a schema representing a quote dividing characteristics from a quote (e.g. author, year, translation, orignal language, etc.).&lt;/li&gt;
  &lt;li&gt;Provide a page for adding quotes.&lt;/li&gt;
  &lt;li&gt;Provide a page for searching quotes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the moment, I don’t think there are many more things to add, but if the application is developed smartly, more features should easily  be able to be added in the future.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Nov 2015 19:30:00 +0100</pubDate>
        <link>http://emilio.lundgaardlopez.com/development/php/mysql/phpfortune/2015/11/13/Re-implementing-phpFortune-Part-1.html</link>
        <guid isPermaLink="true">http://emilio.lundgaardlopez.com/development/php/mysql/phpfortune/2015/11/13/Re-implementing-phpFortune-Part-1.html</guid>
        
        <category>fortune</category>
        
        <category>cookie</category>
        
        <category>development</category>
        
        <category>php</category>
        
        <category>mysql</category>
        
        <category>databases</category>
        
        
        <category>development</category>
        
        <category>php</category>
        
        <category>mysql</category>
        
        <category>phpfortune</category>
        
      </item>
    
      <item>
        <title>Development: Kaffe Fair alternative design</title>
        <description>&lt;h2 id=&quot;keffe-fair-alternative-design&quot;&gt;Keffe Fair alternative design&lt;/h2&gt;
&lt;p&gt;Mid 2015 I was hired by a coffee shop in Aalborg called Kaffe Fair. They needed to update their webpage, to look more modern and professional, and to attract people with their content.&lt;!--more--&gt; There were two designs that I implemented, they picked the one you can currently see at &lt;a href=&quot;kaffefair.dk&quot;&gt;kaffefair.dk&lt;/a&gt; and below you can check a video with the main characteristics of the main alternative proposed. Below the video are some keywords of the alternative’s qualities.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/7244VekBnhM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;characteristics&quot;&gt;Characteristics&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Backoffice in Umbraco&lt;/li&gt;
  &lt;li&gt;Bootstrap based&lt;/li&gt;
  &lt;li&gt;Responsive&lt;/li&gt;
  &lt;li&gt;Lightweight&lt;/li&gt;
  &lt;li&gt;Crossbrowser, crossdevice&lt;/li&gt;
  &lt;li&gt;Modern looking&lt;/li&gt;
  &lt;li&gt;Easy to use, extend, and modify&lt;/li&gt;
  &lt;li&gt;Simple and automatic&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 25 Aug 2015 20:30:00 +0200</pubDate>
        <link>http://emilio.lundgaardlopez.com/development/portfolio/webdesign/2015/08/25/Kaffe-Fair-Alternative-design.html</link>
        <guid isPermaLink="true">http://emilio.lundgaardlopez.com/development/portfolio/webdesign/2015/08/25/Kaffe-Fair-Alternative-design.html</guid>
        
        <category>kaffe-fair</category>
        
        <category>development</category>
        
        <category>umbraco</category>
        
        <category>backoffice</category>
        
        <category>webdesign</category>
        
        
        <category>development</category>
        
        <category>portfolio</category>
        
        <category>webdesign</category>
        
      </item>
    
      <item>
        <title>Jekyll posts: Implementing pagination</title>
        <description>&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;Jekyll provides a pretty neat posting system in which one doesn’t need much to create new blog entries. Jekyll comes by default with a page that lists the blog entries found in the &lt;em&gt;_post&lt;/em&gt; folder (as long as they were formatted properly). As a blog grows bigger and bigger, the list of entries can get quite long and, from a design point of view, this can drive to a design failure. Therefore we want to have pagination available. &lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;
&lt;p&gt;We start by noticing that Jekyll provides tools for paginating ass seen in the &lt;a href=&quot;http://jekyllrb.com/docs/variables/&quot;&gt;Jekyll documentation&lt;/a&gt;. You get a pretty fair tutorial and code for enablig and displaying pagination. I’ve modified such code to display the excerpt instead of the whole post content. Check out &lt;a href=&quot;https://github.com/emiliolcc/emiliolcc.github.io/raw/master/blog/index.html&quot;&gt;the raw for blog/index.html&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-new-problem-navigation-overcrowding&quot;&gt;A new problem: navigation overcrowding&lt;/h2&gt;
&lt;p&gt;While the pagination tutorial works like a charm, it brings a small issue with the current way we have of displaying the navigation menu. The problem is that we are forming the menu using the following code&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;trigger&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% for page in site.pages %}
    {% if page.title %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;page-link&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.url | prepend: site.baseurl }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ page.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    {% endif %}
  {% endfor %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;a-solution-to-the-new-problem&quot;&gt;A solution to the new problem&lt;/h2&gt;
&lt;p&gt;Initially that’s a fine code but the issue is that pagination will create a items in &lt;em&gt;sites.pages&lt;/em&gt; as for example &lt;em&gt;blog/page2&lt;/em&gt; and &lt;em&gt;blog/page3&lt;/em&gt;. This is, the navigation menu will show one &lt;em&gt;Blog&lt;/em&gt; item in the navigation menu for every page of pagination there is. The following solution was thought while having in mind 2 points:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;There will be a blog, there will be entries in it, and every blog page will have title &lt;strong&gt;Blog&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;The blog first page will be available at {{ site.url }}/blog &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;trigger&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% for page in site.pages %}
    {% if page.title %}
      {% if page.title != &amp;quot;Blog&amp;quot; %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;page-link&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.url | prepend: site.baseurl }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ page.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      {% endif %}
    {% endif %}
  {% endfor %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;page-link&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/blog/{{ prepend: site.url }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;EDIT: While I like generalizing code and making it as abstract as possible, I realized that the code looks smoother and nicer when just manually creating the navingation anyways. As the items from the navigation menu are relative, I don’t need to have much in mind, just list the items I want to place.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 25 Aug 2015 16:30:00 +0200</pubDate>
        <link>http://emilio.lundgaardlopez.com/jekyll/2015/08/25/implementing-pagination.html</link>
        <guid isPermaLink="true">http://emilio.lundgaardlopez.com/jekyll/2015/08/25/implementing-pagination.html</guid>
        
        <category>posts</category>
        
        <category>jekyll</category>
        
        <category>pagination</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Jekyll: toggling information on click.</title>
        <description>&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;Recently I got to talk with a career and job advisor and he pointed out some things about my current job search. One of the things he mentioned was that sometimes it’s impossible for an employer to look at 200 CVs he might get for an opening in his company. Instead, it’s a common practice to quickly skip through the CVs to see if there’s enough information there to give the CV a better look at. &lt;!--more--&gt;This means it is important to shorten my CV as much as possible without losing relevant information.&lt;/p&gt;

&lt;h2 id=&quot;the-solutions&quot;&gt;The solution(s)&lt;/h2&gt;

&lt;p&gt;We came out with two ideas to help ease that initial hover look given to the CV. The first one was to create a new “short” CV in which I display important information but without much details. If the person reading finds it interesting they can refer to my &lt;a href=&quot;http://emilio.lundgaardlopez.com/cv&quot;&gt;online CV&lt;/a&gt; for more information. Even though this document should relieve the problem a bit, it could still be interesting to shorten, at least visually, the content of my online CV.
For this I’m taking the well known technique of displaying all the main headers (e.g. “Persona details”, “Academic experience”, etc.) but the actual information will be collapsed. Next to each header there will be an arrow offering to collapse or expand the information.
While using JQuery would be an easy option, we are going to do it using just Javascript and CSS. As I’m using markup to style my page, it’s somehow umconfortable to predict the structure of the content. However, we can add content straight in HTML and we will do so to mark properly the data we want to toggle.
Initially, we will also need to change headers in the Markup form to classic HTML. This will provide a more flexible header (as we will see in the solution, we will need to add a class to each header).
The final solution will look something like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &amp;amp;#8594 code is the unicode for the arrow →. Similarly, &amp;amp;#8595 is unicode for ↓.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;toggle1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;toggleInfo&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Something &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;toggle1A&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;#8594;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;toggle1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;display:none;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will be accompanied by the following script that adds a listner to each of the elements of the class toggleInfo and links the event &lt;em&gt;click&lt;/em&gt; to a function that does the job og toggling the visibility of the information and chages the direction of the arrow displayed next to the title.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;toggleInfo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;arrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;amp;#8595;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;block&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;arrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;amp;#8594;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;classname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;a-new-problem-mixing-raw-html-and-markdown-properly&quot;&gt;A new problem: mixing raw HTML and Markdown properly&lt;/h2&gt;

&lt;p&gt;While this solution works in certain parts of the CV, it moslty doesn’t work. The reason for this is that markdown processes the document and translates&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
  * Item1

  * Item2

  * Item3
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;into&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  * Item2
  * Item3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;insteaf of&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-solution-to-the-new-problem&quot;&gt;The solution to the new problem&lt;/h2&gt;

&lt;p&gt;There is probably a more sophisticated solution out there but what I found faster and simpler was to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use Markdown to style and format the document as wanted&lt;/li&gt;
  &lt;li&gt;Open the processed document in a browser.&lt;/li&gt;
  &lt;li&gt;Copy the processed HTML&lt;/li&gt;
  &lt;li&gt;Insert it in the pre-processed .md file inside a &lt;em&gt;div&lt;/em&gt;. The Markdown processor will not format anything inside a div and will display it as is.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 24 Aug 2015 12:30:00 +0200</pubDate>
        <link>http://emilio.lundgaardlopez.com/jekyll/2015/08/24/toggle-info-on-click.html</link>
        <guid isPermaLink="true">http://emilio.lundgaardlopez.com/jekyll/2015/08/24/toggle-info-on-click.html</guid>
        
        <category>gh-pages</category>
        
        <category>repository</category>
        
        <category>jekyll</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Jekyll: Implementing Previous post and Next post</title>
        <description>&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Jekyll&lt;/strong&gt; handles blogging quite well so I don’t really need to worry about routing the posts or publish them at all. However there is a small things that most blogs provide automatically that is normally quite useful. This is when at the end of a post there appears a link to the &lt;em&gt;previous post&lt;/em&gt; and one to the &lt;em&gt;next post&lt;/em&gt;. &lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;

&lt;p&gt;Fortunately, &lt;strong&gt;Jekyll&lt;/strong&gt; does provide a way of know if there are such things as previous and next post, as well as provides access to its url. The following code was added to the &lt;em&gt;post&lt;/em&gt; layout:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;previousPost&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;float:left;width:50%;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    {%if page.previous %}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}{{ site.baseurl }}{{ page.previous.url }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Prev: {{ page.previous.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    {% endif %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nextPost&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;float:right;width:50%;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    {%if page.next %}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}{{ site.baseurl }}{{ page.next.url }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Next: {{ page.next.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    {% endif %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The reason why we check for page.previous before building the anchor is because Jekyll will return &lt;em&gt;null&lt;/em&gt; if such post doesn’t exist&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 26 May 2015 13:53:00 +0200</pubDate>
        <link>http://emilio.lundgaardlopez.com/jekyll/2015/05/26/implementing-next-and-previous.html</link>
        <guid isPermaLink="true">http://emilio.lundgaardlopez.com/jekyll/2015/05/26/implementing-next-and-previous.html</guid>
        
        <category>jeyll</category>
        
        <category>previous</category>
        
        <category>next</category>
        
        <category>post</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>GitHub Pages: recognizing GitHub hosted pages in repositories</title>
        <description>&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;When hosted my page in GitHub Pages I found that I get access to an API with the information about my github user. This is very useful as I can for example list all my public repositories, and provide a link to them so visitor can check out my &lt;em&gt;attemps&lt;/em&gt; to develop. &lt;!--more--&gt;The easiest way to list them was provided by the documentation of &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt; itself:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public_repositories&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ repository.html_url }&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt;{{ repository.name }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;{% endfor %}&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem with this code is that &lt;em&gt;respository.html_url&lt;/em&gt; doesn’t take into account whether the repository has a GitHub Page set up.&lt;/p&gt;

&lt;h2 id=&quot;thinking-for-a-solution&quot;&gt;Thinking for a solution&lt;/h2&gt;

&lt;h3 id=&quot;by-checking-for-a-gh-pages-branch&quot;&gt;By checking for a gh-pages branch&lt;/h3&gt;

&lt;p&gt;To check whether there is a page or not we need to check if there is a branch for the project called &lt;em&gt;gh-pages&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;by-defining-the-homepage-manually&quot;&gt;By defining the homepage manually&lt;/h3&gt;

&lt;p&gt;GitHub allows us to manually input a description and homepage of a project through the repository’s page. The homepage can be access in Liquid Template by using (in the example from before) {{ repository.homepage }}. As sometimes the empty value of such variable is represented by &lt;em&gt;null&lt;/em&gt; and some other times by “”, we will need to check both before accepting its existance.&lt;/p&gt;

</description>
        <pubDate>Fri, 22 May 2015 18:58:22 +0200</pubDate>
        <link>http://emilio.lundgaardlopez.com/github/2015/05/22/github-repositories-github-page.html</link>
        <guid isPermaLink="true">http://emilio.lundgaardlopez.com/github/2015/05/22/github-repositories-github-page.html</guid>
        
        <category>gh-pages</category>
        
        <category>repository</category>
        
        <category>jekyll</category>
        
        
        <category>github</category>
        
      </item>
    
  </channel>
</rss>
